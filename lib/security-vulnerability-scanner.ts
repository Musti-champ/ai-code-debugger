export interface SecurityVulnerability {
  id: string
  type: string
  severity: "critical" | "high" | "medium" | "low"
  title: string
  description: string
  file: string
  line: number
  code: string
  cwe: string // Common Weakness Enumeration
  owasp: string // OWASP category
  remediation: string
  example?: string
}

export interface SecurityScanResult {
  vulnerabilities: SecurityVulnerability[]
  summary: {
    critical: number
    high: number
    medium: number
    low: number
  }
  score: number // 0-100, higher is more secure
}

export function scanSecurityVulnerabilities(
  files: Array<{ path: string; content: string; language: string }>,
): SecurityScanResult {
  const vulnerabilities: SecurityVulnerability[] = []

  for (const file of files) {
    // Scan based on file type
    if (file.language === "js" || file.language === "jsx" || file.language === "ts" || file.language === "tsx") {
      vulnerabilities.push(...scanJavaScriptVulnerabilities(file))
    } else if (file.language === "py") {
      vulnerabilities.push(...scanPythonVulnerabilities(file))
    } else if (file.language === "php") {
      vulnerabilities.push(...scanPHPVulnerabilities(file))
    } else if (file.language === "java") {
      vulnerabilities.push(...scanJavaVulnerabilities(file))
    } else if (file.language === "sql") {
      vulnerabilities.push(...scanSQLVulnerabilities(file))
    }
  }

  const summary = {
    critical: vulnerabilities.filter((v) => v.severity === "critical").length,
    high: vulnerabilities.filter((v) => v.severity === "high").length,
    medium: vulnerabilities.filter((v) => v.severity === "medium").length,
    low: vulnerabilities.filter((v) => v.severity === "low").length,
  }

  const score = Math.max(0, 100 - (summary.critical * 20 + summary.high * 10 + summary.medium * 5 + summary.low * 2))

  return { vulnerabilities, summary, score }
}

function scanJavaScriptVulnerabilities(file: {
  path: string
  content: string
  language: string
}): SecurityVulnerability[] {
  const vulns: SecurityVulnerability[] = []
  const lines = file.content.split("\n")

  lines.forEach((line, index) => {
    // SQL Injection detection
    if (/query\s*\(\s*[`"'].*\$\{/.test(line) || /sql\s*\(\s*`.*\$\{/.test(line)) {
      vulns.push({
        id: `sqli-${file.path}-${index}`,
        type: "SQL Injection",
        severity: "critical",
        title: "Potential SQL Injection Vulnerability",
        description: "User input is directly concatenated into SQL queries without parameterization",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-89",
        owasp: "A03:2021 – Injection",
        remediation: "Use prepared statements or parameterized queries instead of string concatenation",
        example:
          "// Instead of: `SELECT * FROM users WHERE id = ${id}`\n// Use: database.query('SELECT * FROM users WHERE id = ?', [id])",
      })
    }

    // XSS Detection
    if (/innerHTML\s*=\s*[^"'`]*\$\{|\.html\s*\(\s*\$\{/.test(line)) {
      vulns.push({
        id: `xss-${file.path}-${index}`,
        type: "Cross-Site Scripting (XSS)",
        severity: "high",
        title: "Potential XSS Vulnerability",
        description: "User input is directly inserted into HTML without sanitization",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-79",
        owasp: "A03:2021 – Injection",
        remediation: "Use textContent instead of innerHTML, or sanitize HTML with a library like DOMPurify",
        example:
          "// Instead of: element.innerHTML = userInput\n// Use: element.textContent = userInput\n// Or: element.innerHTML = DOMPurify.sanitize(userInput)",
      })
    }

    // Hardcoded Secrets Detection
    if (
      /['"`](password|secret|api[_-]?key|token|private[_-]?key)\s*[=:]\s*['"][^'"`]+['"]/.test(line) ||
      /const\s+(\w*secret\w*|\w*key\w*|\w*password\w*)\s*=\s*['"][^'"`]+['"]/.test(line)
    ) {
      vulns.push({
        id: `secrets-${file.path}-${index}`,
        type: "Hardcoded Secrets",
        severity: "critical",
        title: "Hardcoded Secret or Credential",
        description: "Sensitive information like passwords, API keys, or tokens are hardcoded in the source",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-798",
        owasp: "A02:2021 – Cryptographic Failures",
        remediation: "Move secrets to environment variables or a secure vault",
        example: "// Instead of: const apiKey = 'sk_live_abc123xyz'\n// Use: const apiKey = process.env.STRIPE_API_KEY",
      })
    }

    // Command Injection Detection
    if (/exec\s*\(|shell\s*\(|spawn\s*\(\s*[`"']*.*\$\{/.test(line)) {
      vulns.push({
        id: `cmd-inject-${file.path}-${index}`,
        type: "Command Injection",
        severity: "critical",
        title: "Potential Command Injection",
        description: "User input is directly passed to shell execution functions",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-78",
        owasp: "A03:2021 – Injection",
        remediation: "Use parameterized execution or avoid shell commands altogether",
        example: "// Instead of: exec(`rm -rf ${userPath}`)\n// Use: spawn('rm', ['-rf', userPath])",
      })
    }

    // Weak Cryptography Detection
    if (/md5|sha1|crypto\.createCipher\(/.test(line)) {
      vulns.push({
        id: `crypto-${file.path}-${index}`,
        type: "Weak Cryptography",
        severity: "high",
        title: "Use of Weak Cryptographic Algorithm",
        description: "MD5, SHA1, or deprecated crypto methods are used for security-sensitive operations",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-327",
        owasp: "A02:2021 – Cryptographic Failures",
        remediation: "Use SHA-256 or bcrypt for password hashing, and crypto.createCipheriv for encryption",
        example: "// Use bcrypt for passwords: bcrypt.hash(password, 10)\n// Use SHA-256: crypto.createHash('sha256')",
      })
    }

    // Unvalidated Redirects
    if (/window\.location\s*=\s*[^"'`]*\$\{|redirect\s*\(\s*\$\{/.test(line)) {
      vulns.push({
        id: `redirect-${file.path}-${index}`,
        type: "Unvalidated Redirect",
        severity: "medium",
        title: "Potential Unvalidated Redirect",
        description: "User input is used in redirects without validation",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-601",
        owasp: "A01:2021 – Broken Access Control",
        remediation: "Validate and whitelist allowed redirect URLs",
      })
    }

    // NoSQL Injection
    if (/find\s*\(\s*{[^}]*\$\{|collection\.find\s*\(\s*{[^}]*\$\{/.test(line)) {
      vulns.push({
        id: `nosql-${file.path}-${index}`,
        type: "NoSQL Injection",
        severity: "high",
        title: "Potential NoSQL Injection",
        description: "User input is directly embedded in NoSQL query objects",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-943",
        owasp: "A03:2021 – Injection",
        remediation: "Sanitize input and use query parameterization where available",
      })
    }
  })

  return vulns
}

function scanPythonVulnerabilities(file: { path: string; content: string; language: string }): SecurityVulnerability[] {
  const vulns: SecurityVulnerability[] = []
  const lines = file.content.split("\n")

  lines.forEach((line, index) => {
    // SQL Injection in Python
    if (/\.execute\s*\(\s*[`"'].*%s|\.execute\s*\(\s*[`"'].*f\s*"/.test(line)) {
      vulns.push({
        id: `sql-py-${file.path}-${index}`,
        type: "SQL Injection",
        severity: "critical",
        title: "SQL Injection via String Formatting",
        description: "SQL queries are constructed using string concatenation or formatting",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-89",
        owasp: "A03:2021 – Injection",
        remediation: "Use parameterized queries with tuple arguments: cursor.execute(query, (value,))",
      })
    }

    // Pickle deserialization
    if (/pickle\.loads|pickle\.load/.test(line)) {
      vulns.push({
        id: `pickle-${file.path}-${index}`,
        type: "Insecure Deserialization",
        severity: "critical",
        title: "Use of pickle.loads() with Untrusted Data",
        description: "pickle.loads() can execute arbitrary code from untrusted data",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-502",
        owasp: "A08:2021 – Software and Data Integrity Failures",
        remediation: "Use JSON for untrusted data or validate the source before unpickling",
      })
    }

    // Exec/eval usage
    if (/exec\s*\(|eval\s*\(/.test(line)) {
      vulns.push({
        id: `eval-${file.path}-${index}`,
        type: "Code Injection",
        severity: "critical",
        title: "Use of exec() or eval()",
        description: "exec() or eval() with user input allows arbitrary code execution",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-95",
        owasp: "A03:2021 – Injection",
        remediation: "Avoid exec/eval entirely. Use safer alternatives like ast.literal_eval() for JSON parsing",
      })
    }

    // Weak random for crypto
    if (/random\.choice|random\.randint|random\.random/.test(line)) {
      vulns.push({
        id: `random-${file.path}-${index}`,
        type: "Weak Randomness",
        severity: "medium",
        title: "Use of random Module for Cryptographic Operations",
        description: "Python's random module is not suitable for cryptographic operations",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-338",
        owasp: "A02:2021 – Cryptographic Failures",
        remediation: "Use secrets module for cryptographic randomness: secrets.token_hex()",
      })
    }
  })

  return vulns
}

function scanPHPVulnerabilities(file: { path: string; content: string; language: string }): SecurityVulnerability[] {
  const vulns: SecurityVulnerability[] = []
  const lines = file.content.split("\n")

  lines.forEach((line, index) => {
    // SQL Injection
    if (/\$_GET|\$_POST|\$_REQUEST/.test(line) && /query|SELECT|INSERT|UPDATE|DELETE/.test(file.content)) {
      vulns.push({
        id: `sql-php-${file.path}-${index}`,
        type: "SQL Injection",
        severity: "critical",
        title: "Potential SQL Injection from User Input",
        description: "User-supplied data from $_GET, $_POST, or $_REQUEST is used in database queries",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-89",
        owasp: "A03:2021 – Injection",
        remediation: "Use prepared statements with placeholders: mysqli_prepare() or PDO prepared statements",
      })
    }

    // Remote File Inclusion
    if (/include|require/.test(line) && /\$_GET|\$_POST|\$_REQUEST/.test(line)) {
      vulns.push({
        id: `rfi-${file.path}-${index}`,
        type: "Remote File Inclusion (RFI)",
        severity: "critical",
        title: "Remote File Inclusion Vulnerability",
        description: "User input is directly used in include/require statements",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-98",
        owasp: "A03:2021 – Injection",
        remediation: "Whitelist allowed files or use basename() to prevent directory traversal",
      })
    }

    // Hardcoded Database Credentials
    if (/mysqli_connect|new PDO/.test(line) && /['"][^'"]*['"]/.test(line)) {
      vulns.push({
        id: `db-creds-${file.path}-${index}`,
        type: "Hardcoded Credentials",
        severity: "critical",
        title: "Hardcoded Database Credentials",
        description: "Database credentials are hardcoded in the source file",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-798",
        owasp: "A02:2021 – Cryptographic Failures",
        remediation: "Use environment variables or configuration files outside the web root",
      })
    }
  })

  return vulns
}

function scanJavaVulnerabilities(file: { path: string; content: string; language: string }): SecurityVulnerability[] {
  const vulns: SecurityVulnerability[] = []
  const lines = file.content.split("\n")

  lines.forEach((line, index) => {
    // SQL Injection
    if (/Statement\.executeQuery|executeUpdate/.test(line) && /\+\s*[a-zA-Z_]/.test(line)) {
      vulns.push({
        id: `sql-java-${file.path}-${index}`,
        type: "SQL Injection",
        severity: "critical",
        title: "String Concatenation in SQL Query",
        description: "SQL query is built using string concatenation instead of prepared statements",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-89",
        owasp: "A03:2021 – Injection",
        remediation: "Use PreparedStatement instead of Statement for parameterized queries",
      })
    }

    // Insecure Deserialization
    if (/readObject|ObjectInputStream/.test(line)) {
      vulns.push({
        id: `deser-java-${file.path}-${index}`,
        type: "Insecure Deserialization",
        severity: "high",
        title: "Unsafe Object Deserialization",
        description: "readObject() can be exploited with malicious serialized objects (gadget chains)",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-502",
        owasp: "A08:2021 – Software and Data Integrity Failures",
        remediation: "Use safer formats like JSON, or implement custom deserialization validation",
      })
    }
  })

  return vulns
}

function scanSQLVulnerabilities(file: { path: string; content: string; language: string }): SecurityVulnerability[] {
  const vulns: SecurityVulnerability[] = []
  const lines = file.content.split("\n")

  lines.forEach((line, index) => {
    // Check for potential SQL injection patterns
    if (/OR\s+1\s*=\s*1|OR\s+'[^']*'\s*=\s*'[^']*'|;\s*DROP|;\s*DELETE|;\s*TRUNCATE/.test(line)) {
      vulns.push({
        id: `sql-pattern-${file.path}-${index}`,
        type: "SQL Injection Pattern",
        severity: "high",
        title: "Suspicious SQL Pattern Detected",
        description: "SQL query contains patterns commonly used in SQL injection attacks",
        file: file.path,
        line: index + 1,
        code: line.trim(),
        cwe: "CWE-89",
        owasp: "A03:2021 – Injection",
        remediation: "Review this query and ensure all user input is properly parameterized",
      })
    }
  })

  return vulns
}
